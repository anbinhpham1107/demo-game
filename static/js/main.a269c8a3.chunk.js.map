{"version":3,"sources":["components/card/index.jsx","components/board/index.jsx","deck.js","App.jsx","index.js"],"names":["Card","disabled","solved","handleClick","id","flipped","type","height","width","className","style","onClick","src","alt","Board","cards","map","card","key","includes","initializeDeck","array","_array","slice","i","length","randomIndex","Math","floor","random","temp","shuffle","reduce","acc","push","matchedCounter","ReactDOM","render","useState","setCards","setFlipped","setSolved","setDisabled","useEffect","resetCards","sameCardClicked","isMatch","clickedCard","find","renderGameOver","align","window","location","reload","document","getElementById","setTimeout"],"mappings":"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","file":"static/js/main.a269c8a3.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from \"prop-types\"\r\nimport './styles.css'\r\n/**************************************************\r\n* Author: Binh An Pham\r\n* Version: 12/29/2019\r\n* Description: holds layouts and attributes of card\r\n* components\r\n***************************************************/\r\nexport default function Card({ disabled, solved, handleClick, id, flipped, type, height, width}){\r\n    return <div\r\n        className={`flip-container ${flipped ? 'flipped' : ''}`}\r\n        style={{\r\n            width,\r\n            height\r\n        }}\r\n        onClick={() => disabled ? null : handleClick(id)}\r\n        >\r\n            <div className=\"flipper\">\r\n                <img \r\n                    style={{\r\n                        height,\r\n                        width\r\n                    }}\r\n                    className={flipped ? 'front' : 'back'}\r\n                    src={flipped || solved ? `${type}.svg` : `react.svg`}\r\n                    alt = {`${type}`}\r\n                />\r\n            </div>\r\n        </div>\r\n}\r\n\r\nCard.propTypes = {\r\n    disabled: PropTypes.bool.isRequired,\r\n    solved: PropTypes.bool.isRequired,\r\n    handleClick: PropTypes.func.isRequired,\r\n    id: PropTypes.number.isRequired,\r\n    flipped: PropTypes.bool.isRequired,\r\n    type: PropTypes.string.isRequired,\r\n    height: PropTypes.number.isRequired,\r\n    width: PropTypes.number.isRequired,\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Card from '../card'\r\nimport './styles.css'\r\n/**************************************************\r\n* Author: Binh An Pham\r\n* Version: 12/29/2019\r\n* Description: holds the layout and attributes for \r\n* the game board\r\n***************************************************/\r\nexport default function Board({solved,disabled, cards, flipped, handleClick}){\r\n    return <div className=\"board\">\r\n        {cards.map((card) => (\r\n            <Card\r\n                key = {card.id}\r\n                id = {card.id}\r\n                type={card.type}\r\n                width = {125} \r\n                height = {125}\r\n                flipped = {flipped.includes(card.id)}\r\n                handleClick = {handleClick}\r\n                solved = {solved.includes(card.id)}\r\n                disabled = {disabled || solved.includes(card.id)}\r\n            />       \r\n        ))}\r\n    </div>\r\n}\r\n\r\nBoard.propTypes = {\r\n    disabled: PropTypes.bool.isRequired,\r\n    solved: PropTypes.arrayOf(PropTypes.number).isRequired,\r\n    cards: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\r\n    flipped: PropTypes.arrayOf(PropTypes.number).isRequired,\r\n    handleClick: PropTypes.func.isRequired,\r\n}","/**************************************************\r\n* Author: Binh An Pham\r\n* Version: 12/29/2019\r\n* Description: initialize an array of all icons, \r\n* create a duplicate to every icon and shuffle them\r\n***************************************************/\r\nexport default function initializeDeck(){\r\n    let id = 0\r\n    const cards = ['adidas', 'android','apple', 'chick-fil-a','disney',\r\n    'facebook','gmail','hp','instagram','line','linkedin','mastercard',\r\n    'tesla','tiktok', 'twitter','ups','whatsapp','youtube'\r\n        ].reduce((acc, type) => {\r\n        acc.push({\r\n            id: id++,\r\n            type\r\n        })\r\n        acc.push({\r\n            id: id++,\r\n            type\r\n        })\r\n        return acc\r\n    }, [])\r\n    return shuffle(cards)\r\n}\r\n\r\n/**********************************************************\r\n* Function: shuffle\r\n* Arguments: an array of strings\r\n* Return: a randomized array\r\n* Description: imitate the Fisher-Yates shuffling algorithm\r\n***********************************************************/\r\nfunction shuffle(array) {\r\n    const _array = array.slice(0)\r\n    for (let i =0; i < array.length - 1; i++ ){\r\n        let randomIndex = Math.floor(Math.random() * (i + 1))\r\n        let temp = _array[i]\r\n        _array[i] = _array[randomIndex]\r\n        _array[randomIndex] = temp\r\n    }\r\n    return _array\r\n}\r\n","import React, {useState, useEffect} from 'react';\r\nimport Board from './components/board'\r\nimport ReactDOM from 'react-dom';\r\nimport initializeDeck from './deck'\r\n/******************************************************************************\r\n* Author: Binh An Pham\r\n*\r\n* Version: 12/29/2019\r\n*\r\n* Description: App.jsx holds the high level designs and logics for the game\r\n*\r\n* Game(App) Layout and Design: The game will have a board of 36 (6X6 grid) cards. \r\n*      Each card will have a distinct id, the back faces up and the hidden front \r\n*      faces down. The rules of the game are below:\r\n*         1.The cards should be laid out in a grid\r\n*         2.Click to turn over any two cards.\r\n*         3.If the two cards match, keep them in a revealed state.\r\n*         4.If they don't match, turn them back over.\r\n*         5.The game is over when all the cards have been matched\r\n*******************************************************************************/\r\n// Initialize a counter to count the number matched pairs\r\nlet matchedCounter = 0\r\nexport default function App() {\r\n  const [cards, setCards] = useState([])\r\n  const [flipped, setFlipped] = useState([])\r\n  const [solved, setSolved] = useState([])\r\n  const [disabled, setDisabled] = useState(false)\r\n\r\n  // Initialize the deck with randomized positions of cards\r\n  useEffect(() => {\r\n    setCards(initializeDeck())\r\n  }, [])\r\n  \r\n/**********************************************************\r\n* Function: handleClick\r\n* Arguments: id\r\n* Return: none\r\n* Description: handles the clicking events, get called every\r\n* time a card is clicked\r\n***********************************************************/\r\n\r\n  const handleClick = (id) => {\r\n    setDisabled(true)\r\n    // Handle the first flipped card of the deck \r\n    if (flipped.length === 0){\r\n      setFlipped([id])\r\n      setDisabled(false)\r\n    }\r\n    // Handle the second flipped card \r\n    else{\r\n    // Handle the same flipped card being clicked again\r\n      if (sameCardClicked(id)){ \r\n        setFlipped([id])\r\n        setDisabled(false)\r\n      }\r\n    // If the second flipped card is a different card \r\n      setFlipped([flipped[0], id])\r\n    // Check for match. If true set the two matched cards to be solved.\r\n      if (isMatch(id) && !sameCardClicked(id)) {\r\n        setSolved([...solved, flipped[0], id])\r\n        resetCards()\r\n        //Increment the counter for matched pairs \r\n        matchedCounter += 1\r\n      }\r\n      // Game Over if there are 18 pairs matched\r\n      if (matchedCounter === 18 ){\r\n        // Render the Game Over screen\r\n        ReactDOM.render(renderGameOver, document.getElementById('root'));\r\n      }\r\n      // If two flipped cards are not matched reset the cards\r\n      else {\r\n        setTimeout(resetCards, 1500)\r\n      }\r\n    }\r\n  }\r\n/**********************************************************\r\n* Function: resetCards\r\n* Arguments: none\r\n* Return: none\r\n* Description: resets the cards, unflips every flipped cards\r\n***********************************************************/\r\n  const resetCards = () => {\r\n    setFlipped([])\r\n    setDisabled(false)\r\n  }\r\n  \r\n/**********************************************************\r\n* Function: sameCardClicked\r\n* Arguments: id\r\n* Return: boolean\r\n* Description: checks if the same card id has been flipped\r\n***********************************************************/\r\n  const sameCardClicked = (id) => flipped.includes(id)\r\n\r\n/**********************************************************\r\n* Function: isMatch\r\n* Arguments: id\r\n* Return: boolean\r\n* Description: checks if two flipped cards are the same\r\n***********************************************************/\r\n  const isMatch = (id) => {\r\n    const clickedCard = cards.find((card) => card.id === id)\r\n    const flippedCard = cards.find((card) => flipped[0] === card.id)\r\n    return flippedCard.type === clickedCard.type\r\n  }\r\n\r\n/**********************************************************\r\n* Function: resetBoard\r\n* Arguments: none\r\n* Return: none\r\n* Description: resets all game states, reinitializes the deck, \r\n* randomizes the positions of the cards\r\n***********************************************************/\r\n  const resetBoard = () => {\r\n    resetCards()\r\n    setSolved([])\r\n    setCards(initializeDeck())\r\n  }\r\n\r\n/**************************************************************\r\n* Function: refreshPage\r\n* Arguments: none\r\n* Return: none\r\n* Description: refreshes the game over page to start a new game\r\n***************************************************************/\r\n  function refreshPage() {\r\n    window.location.reload(false);\r\n  }\r\n\r\n/**********************************************************\r\n* jsx scripts for the layout of the Game Over screen\r\n***********************************************************/\r\n  const renderGameOver = (\r\n    <div align=\"center\">\r\n      <h1>Game Over! Press Restart to start a new game...</h1>\r\n      <button onClick={refreshPage}>\r\n       ↻ RESTART\r\n      </button>\r\n    </div>\r\n  );\r\n\r\n/**********************************************************\r\n* return the layout for the Game(App)\r\n***********************************************************/\r\n  return (\r\n    <div >\r\n      <div align=\"center\">Memory Game</div>\r\n      <div align=\"center\">\r\n      <button onClick={resetBoard}>\r\n       ↻ RESTART\r\n      </button>\r\n      <div>Game In Progress...</div>\r\n      </div>\r\n      <Board\r\n        cards={cards}\r\n        flipped={flipped}\r\n        handleClick={handleClick}\r\n        disabled={disabled}\r\n        solved={solved}\r\n        />\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n//import * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n//serviceWorker.unregister();\r\n"],"sourceRoot":""}